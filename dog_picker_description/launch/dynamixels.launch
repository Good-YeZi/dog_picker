<?xml version="1.0" encoding="UTF-8"?>
<launch>	
    <!-- Load the URDF/Xacro model of our robot -->
	<param name="robot_description" command="$(find xacro)/xacro.py '$(find dog_picker_description)/urdf/dog_picker_description.xacro'" />
    

    <!-- Publish the robot state -->
	<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
    	<param name="publish_frequency" value="20.0"/>
    </node>

   <!-- Start the Dynamixel low-level driver manager with parameters -->
   <node name="dynamixel_manager" pkg="dynamixel_controllers"
      type="controller_manager.py" required="true" output="screen">
      <rosparam>
         namespace: dynamixel_manager
         serial_ports:
            dynamixel_ax12:
               port_name: "/dev/ttyUSB0"
               baud_rate: 1000000
               min_motor_id: 1
               max_motor_id: 16
               update_rate: 20
      </rosparam>
   </node>
   
    <!-- Load joint controller configuration from YAML file to parameter server -->
    <rosparam file="$(find dog_picker_description)/param/dynamixel_params.yaml" command="load"/>

   <!-- Start the head pan and tilt controllers -->
   <node name="dynamixel_controller_spawner_ax12" pkg="dynamixel_controllers"
   type="controller_spawner.py"
        args="--manager=dynamixel_manager
              --port=dynamixel_ax12
              --type=simple
        dynamixel_AX12_1_controller
        dynamixel_AX12_10_controller
        dynamixel_AX12_12_controller
        dynamixel_AX12_14_controller
        dynamixel_AX12_11_controller
        dynamixel_AX12_13_controller
        dynamixel_AX12_15_controller
        dynamixel_AX12_4_controller
        dynamixel_AX12_16_controller
        dynamixel_AX12_8_controller
        dynamixel_AX12_5_controller
        dynamixel_AX12_7_controller
        dynamixel_AX12_9_controller"
        output="screen" />

   <!-- Start the Dynamixel Joint States Publisher -->
   <node name="dynamixel_joint_states_publisher" pkg="dog_move" type="dynamixel_joint_state_publisher.py" output="screen" />

   <!-- Start all Dynamixels in the relaxed state -->
   <node pkg="dog_move" type="relax_all_servos.py" name="relax_all_servos" />
  
   <!-- Publish a static transform between the robot base and the world frame -->
   <node pkg="tf" type="static_transform_publisher" name="virtual_joint_broadcaster_0" args="0 0 0 0 0 0 /world_frame /base_link 100" />
</launch>
